#!/bin/bash
#--------------------------------------
# Script Name:  postinst
# Version:      1.1
# Author:       skurka@ukaachen.de, shuening@ukaachen.de, akombeiz@ukaachen.de
# Date:         30 Oct 24
# Purpose:      Post-installation script for 'aktin-notaufnahme-i2b2'. Configures services, initializes the i2b2 database, sets up users and
#               permissions, ensures all components are enabled and started correctly.
#--------------------------------------

readonly OPERATION="${1}"

source_helper_script() {
  local helper_path="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/helper.sh"
  if [[ -f "${helper_path}" ]]; then
    . "${helper_path}"
  else
    echo "Error: helper.sh not found at ${helper_path}" >&2
    exit 1
  fi
}

check_and_start_services() {
  local services=("apache2" "postgresql" "wildfly")
  for service in "${services[@]}"; do
    if ! systemctl is-active --quiet "${service}"; then
      echo "Service ${service} is not running. Starting ${service}..."
      systemctl start "${service}"
      if ! systemctl is-active --quiet "${service}"; then
        echo "Error: Failed to start ${service}." >&2
        exit 1
      fi
    else
      echo "Service ${service} is already running."
    fi
  done
  echo "All services are running."
}

activate_php_curl_extension() {
  if grep -q ";extension=curl" /etc/php/*/apache2/php.ini; then
    echo "Enabling apache2 php-curl extension ..."
    sed -i "s/;extension=curl/extension=curl/" /etc/php/*/apache2/php.ini
    echo "Restarting apache2 ..."
    systemctl restart apache2
  else
    echo "apache2 php-curl extension already enabled."
  fi
}

init_and_seed_i2b2_database() {
  source_helper_script
  connect_to_psql
  wait_for_psql_connection
  if [[ $(eval "${PSQL} -l" | grep "i2b2" | wc -l) == 0 ]]; then
    echo "Creating i2b2 database and users ..."
    eval "${PSQL} -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/database/i2b2_init.sql" >/dev/null
    echo "Seeding i2b2 database ..."
    eval "${PSQL} -v ON_ERROR_STOP=1 -d i2b2 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/database/i2b2_db.sql" >/dev/null
  else
    echo "i2b2 database already exists. Skipping ..."
  fi
}

# TODO: Workaround for insufficient connection handling of WildFly datasources. Replace as soon as possible.
set_wildfly_service_dependency() {
  echo "Setting up service dependency between postgresql and wildfly ..."
  source_helper_script
  add_entry_to_service "wildfly.service" "Requires" "postgresql.service"
  add_entry_to_service "wildfly.service" "After" "postgresql.service"
}

create_wildfly_user() {
  echo "Creating wildfly user and setting up permissions ..."
  id -u wildfly >/dev/null || adduser --system --group --disabled-login --home /var/lib/wildfly wildfly
  chown -R wildfly:wildfly /opt/wildfly
  chown wildfly:wildfly /opt/wildfly/standalone/deployments/*
}

#remove_i2b2_config_data() {
#  local i2b2_config_data_path="/var/www/html/webclient/i2b2_config_data.js"
#  if [[ -f "$i2b2_config_data_path" ]]; then
#    rm "$i2b2_config_data_path"
#  fi
#}

main() {
  set -euo pipefail
  case "$OPERATION" in
    configure)
      # Run after installation or upgrade to complete configuration.
      check_and_start_services
      activate_php_curl_extension
      systemctl enable apache2
      init_and_seed_i2b2_database
      systemctl enable postgresql
      set_wildfly_service_dependency
      create_wildfly_user
      systemctl enable wildfly
      systemctl daemon-reload
      ;;
    abort-upgrade)
      # Used to revert changes if an upgrade fails.
      ;;
    abort-remove)
      # Handle tasks if a package removal is interrupted.
      ;;
    abort-deconfigure)
      # Used if a deconfiguration operation fails.
      ;;
  esac
}

main "$@"
