#!/bin/bash
#--------------------------------------
# Script Name:  postinst
# Version:      1.1
# Authors:      skurka@ukaachen.de, shuening@ukaachen.de, akombeiz@ukaachen.de
# Date:         30 Oct 24
# Purpose:      Ensures proper setup of 'aktin-notaufnahme-i2b2' after installation, configuring and starting services, initializing the i2b2
#               database, enabling PHP extensions, checking PostgreSQL versions, restoring logs, and setting dependencies to make all components
#               fully operational.
#--------------------------------------

readonly OPERATION="${1}"

check_and_start_services() {
  local services=("apache2" "postgresql" "wildfly")
  local max_retries=5
  local retry_delay=5

  for service in "${services[@]}"; do
    echo "Checking service ${service}..."
    for ((i=1; i<=max_retries; i++)); do
      if systemctl is-active --quiet "${service}"; then
        echo "Service ${service} is running."
        break
      fi
      if [ "$i" -eq "$max_retries" ]; then
        echo "Error: Failed to start ${service} after ${max_retries} attempts." >&2
        exit 1
      fi
      echo "Starting ${service}, attempt ${i}/${max_retries}..."
      systemctl start "${service}"
      sleep "${retry_delay}"
    done
  done
}

activate_php_curl_extension() {
  if grep -q ";extension=curl" /etc/php/*/apache2/php.ini; then
    echo "Enabling apache2 php-curl extension ..."
    sed -i "s/;extension=curl/extension=curl/" /etc/php/*/apache2/php.ini
    echo "Restarting apache2 ..."
    systemctl restart apache2
  else
    echo "apache2 php-curl extension already enabled."
  fi
}

check_postgresql_versions() {
  local pg_versions
  pg_versions=$(pg_lsclusters | awk '/^ / {print $1}' | sort -n | uniq)

  if [[ $(echo "${pg_versions}" | wc -l) -gt 1 ]]; then
    echo "Warning: Multiple PostgreSQL versions detected (${pg_versions})."
    echo "Your data is still in the old PostgreSQL version. Please migrate your data to the new version."
    echo "Refer to the PostgreSQL documentation or use 'pg_upgrade' to complete the migration."
  fi
}

source_helper_script() {
  local helper_path="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/helper.sh"
  if [[ -f "${helper_path}" ]]; then
    . "${helper_path}"
  else
    echo "Error: helper.sh not found at ${helper_path}" >&2
    exit 1
  fi
}

init_and_seed_i2b2_database() {
  source_helper_script
  connect_to_psql
  wait_for_psql_connection
  if [[ $(eval "${PSQL} -l" | grep "i2b2" | wc -l) == 0 ]]; then
    echo "Creating i2b2 database and users ..."
    eval "${PSQL} -v ON_ERROR_STOP=1 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/i2b2_init.sql" >/dev/null
    echo "Seeding i2b2 database ..."
    eval "${PSQL} -v ON_ERROR_STOP=1 -d i2b2 -f /usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/sql/i2b2_db.sql" >/dev/null
  else
    echo "i2b2 database already exists. Skipping ..."
  fi
}

restore_wildfly_logs() {
  local log_dir="/opt/wildfly/standalone/log"
  local backup_dir="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/backups/wildfly_logs"

  mkdir -p "${log_dir}"
  # Restore logs from backup directory if they exist
  if [ -d "${backup_dir}" ] && [ "$(ls -A "${backup_dir}")" ]; then
    echo "Restoring WildFly logs to ${log_dir}..."
    cp -r "${backup_dir}/"*.log "${log_dir}/"
    echo "WildFly logs restored."

    # Remove the backup after successful restore
    rm -rf "${backup_dir}"
  else
    echo "No WildFly logs to restore."
  fi
}

# Function to add a value to a key within the [Unit] section of a systemd service file
add_entry_to_service() {
  local service_name="$1"
  local key="$2"
  local value="$3"
  local service_file="/lib/systemd/system/${service_name}"

  # Check if the key exists in the service file
  if grep -q "^${key}=" "${service_file}"; then
    # Get the current line with the key
    local line
    line="$(grep "^${key}=" "${service_file}")"

    # If the value is not already in the line, append it
    if [[ "${line}" != *"${value}"* ]]; then
      line+=" ${value}"
      # Update the line in the service file
      sed -i "s/^${key}=.*/${line}/" "${service_file}"
    fi
  else
    # Add the key and value after the [Unit] section
    sed -i "/^\[Unit\]$/a ${key}=${value}" "${service_file}"
  fi
}

# TODO: Workaround for insufficient connection handling of WildFly datasources. Replace as soon as possible.
set_wildfly_service_dependency() {
  echo "Setting up service dependency between postgresql and wildfly ..."
  add_entry_to_service "wildfly.service" "Requires" "postgresql.service"
  add_entry_to_service "wildfly.service" "After" "postgresql.service"
}

create_wildfly_user() {
  echo "Creating wildfly user and setting up permissions ..."
  id -u wildfly >/dev/null || adduser --system --group --disabled-login --home /var/lib/wildfly wildfly
  chown -R wildfly:wildfly /opt/wildfly
  chown wildfly:wildfly /opt/wildfly/standalone/deployments/*
}

main() {
  set -euo pipefail
  case "$OPERATION" in
    configure)
      # Runs during installation/upgrade after files have been unpacked.
      check_and_start_services
      activate_php_curl_extension
      systemctl enable apache2
      check_postgresql_versions
      init_and_seed_i2b2_database
      systemctl enable postgresql
      restore_wildfly_logs
      set_wildfly_service_dependency
      create_wildfly_user
      systemctl enable wildfly
      systemctl daemon-reload
      ;;
  esac
}

main "$@"
