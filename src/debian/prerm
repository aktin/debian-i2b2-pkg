#!/bin/bash
#--------------------------------------
# Script Name:  prerm
# Version:      1.2
# Authors:      skurka@ukaachen.de, shuening@ukaachen.de, akombeiz@ukaachen.de
# Date:         07 Nov 24
# Purpose:      Manages pre-removal tasks like helper script backup and log preservation
#--------------------------------------

log_info() { echo -e "\033[0;34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $1"; }
log_warn() { echo -e "\033[1;33m[WARN]\033[0m $1"; }
log_error() { echo -e "\033[0;31m[ERROR]\033[0m $1" >&2; }

readonly OPERATION="${1}"

source_helper_script() {
  local helper_path="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/helper.sh"
  log_info "Loading helper script..."
  if [[ ! -f "${helper_path}" ]]; then
    log_error "helper.sh not found at ${helper_path}"
    exit 1
  fi
  . "${helper_path}"
  log_success "Helper script loaded"
}

# Creates temporary helper.sh in /tmp/ as helper.sh would be deleted before postrm and is required for database connection
create_temp_helper() {
  log_info "Creating temporary helper script..."
  local helper_src="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/helper.sh"
  local helper_dest="/tmp/${DPKG_MAINTSCRIPT_PACKAGE}_helper.sh"

  if [[ -f "${helper_dest}" ]]; then
    log_info "helper.sh already existing at ${helper_dest}"
    return 0
  fi
  if [[ ! -f "${helper_src}" ]]; then
    log_error "helper.sh not found at ${helper_src}"
    return 1
  fi
  cp "${helper_src}" "${helper_dest}"
  log_success "Temporary helper created at ${helper_dest}"
}

cleanup_wildfly_deployment_markers() {
  local deploy_dir="/opt/wildfly/standalone/deployments"
  log_info "Cleaning up WildFly deployment markers..."

  if [[ ! -d "${deploy_dir}" ]]; then
    log_warn "Deployment directory not found"
    return 0
  fi

  # Remove all deployment markers while preserving the actual artifacts
  find "${deploy_dir}" -type f \( \
    -name "*.deployed" -o \
    -name "*.dodeploy" -o \
    -name "*.failed" -o \
    -name "*.undeployed" \
  \) -delete
  log_success "Deployment markers cleaned up"
}

main() {
  set -euo pipefail
  source_helper_script
  stop_service "wildfly"
  case "$OPERATION" in
    remove)
      # Runs during package removal before files are deleted
      create_temp_helper
      ;;
    upgrade)
      # Runs during package upgrade before installation of new package
      cleanup_wildfly_deployment_markers
      ;;
  esac
}

main "$@"
