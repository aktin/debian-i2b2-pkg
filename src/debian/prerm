#!/bin/bash
#--------------------------------------
# Script Name:  prerm
# Version:      1.2
# Authors:      skurka@ukaachen.de, shuening@ukaachen.de, akombeiz@ukaachen.de
# Date:         07 Nov 24
# Purpose:      Prepares the system before package files are removed by stopping services, backing up user data, and cleaning runtime artifacts.
#--------------------------------------

log_info() { echo -e "\033[0;34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $1"; }
log_warn() { echo -e "\033[1;33m[WARN]\033[0m $1"; }
log_error() { echo -e "\033[0;31m[ERROR]\033[0m $1" >&2; }

readonly OPERATION="${1}"

source_helper_script() {
  local helper_path="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/helper.sh"
  log_info "Loading helper script..."
  if [[ ! -f "${helper_path}" ]]; then
    log_error "helper.sh not found at ${helper_path}"
    exit 1
  fi
  . "${helper_path}"
  log_success "Helper script loaded"
}

# Creates temporary helper.sh in /tmp/ as helper.sh would be deleted before postrm and is required for database connection
create_temp_helper() {
  log_info "Creating temporary helper script..."
  local helper_src="/usr/share/${DPKG_MAINTSCRIPT_PACKAGE}/helper.sh"
  local helper_dest="/tmp/${DPKG_MAINTSCRIPT_PACKAGE}_helper.sh"

  if [[ -f "${helper_dest}" ]]; then
    log_info "helper.sh already existing at ${helper_dest}"
    return 0
  fi
  if [[ ! -f "${helper_src}" ]]; then
    log_error "helper.sh not found at ${helper_src}"
    return 1
  fi
  cp "${helper_src}" "${helper_dest}"
  log_success "Temporary helper created at ${helper_dest}"
}

backup_wildfly_logs() {
  local log_dir="/opt/wildfly/standalone/log"
  local backup_dir="/var/backups/${DPKG_MAINTSCRIPT_PACKAGE}/wildfly_logs"
  local date_suffix=$(date '+%Y%m%d_%H%M%S')
  log_info "Backing up WildFly logs..."

  if [[ ! -d "${log_dir}" ]]; then
    log_warn "No WildFly logs found for backup"
    return 0
  fi

  mkdir -p "${backup_dir}"
  find "${log_dir}" -type f -name "*.log*" | while read -r log_file; do
  local filename=$(basename "${log_file}")
   # Check if file already has 'backup' in the name
   if [[ "${filename}" =~ backup ]]; then
     # Just move it to backup directory
     if mv "${log_file}" "${backup_dir}/"; then
       log_success "Moved existing backup: ${filename}"
     else
       log_error "Failed to move: ${filename}"
     fi
   else
     # For regular log files, rename with rotation number if present
     if [[ "${filename}" =~ ^(.+)\.log\.([0-9]+)$ ]]; then
       # Handle rotated logs (e.g., server.log.1 -> server.1_backup_20231111_143022.log)
       local base_name="${BASH_REMATCH[1]}"
       local rotation_num="${BASH_REMATCH[2]}"
       local backup_name="${base_name}.${rotation_num}_backup_${date_suffix}.log"
     else
       # Handle main log files (e.g., server.log -> server_backup_20231111_143022.log)
       local base_name="${filename%%.log}"
       local backup_name="${base_name}_backup_${date_suffix}.log"
     fi
     if mv "${log_file}" "${backup_dir}/${backup_name}"; then
       log_success "Backed up: ${filename} -> ${backup_name}"
     else
       log_error "Failed to backup: ${filename}"
     fi
   fi
 done
}

cleanup_wildfly_deployment_markers() {
  local deploy_dir="/opt/wildfly/standalone/deployments"
  log_info "Cleaning up WildFly deployment markers..."

  if [[ ! -d "${deploy_dir}" ]]; then
    log_warn "Deployment directory not found"
    return 0
  fi

  # Remove all deployment markers while preserving the actual artifacts
  find "${deploy_dir}" -type f \( \
    -name "*.deployed" -o \
    -name "*.dodeploy" -o \
    -name "*.failed" -o \
    -name "*.undeployed" \
  \) -delete
  log_success "Deployment markers cleaned up"
}

main() {
  set -euo pipefail
  source_helper_script
  case "$OPERATION" in
    remove)
      # Runs during package removal before files are deleted
      stop_service "wildfly"
      create_temp_helper
      ;;
    upgrade)
      # Runs during package upgrade before old files are deleted
      stop_service "wildfly"
      backup_wildfly_logs
      cleanup_wildfly_deployment_markers
      ;;
  esac
}

main "$@"
